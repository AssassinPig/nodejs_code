============================================================
mongodb
mongod -dbpath d:\mongodb\blog
d:\mongodb\bin\mongod.exe -dbpath d:\mongodb\blog

mongo
use blog
db.users.find()

http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/
启动关闭等操作
sudo /etc/init.d/mongod start
/var/log/mongodb/mongod.log
sudo /etc/init.d/mongod stop
sudo /etc/init.d/mongod restart

索引
文档是mongodb中的基本单元 非常类似于行, 但可以复杂很多
集合可以看作是没有模式的表
单个mongodb的实例 可以容纳多个独立的库 每个都有自己的集合和权集
自带简洁的javascript shell
每一个文档都有特殊键"_id" 它在文档集合中是唯一的

文档 document
1.多个kv关联放在一起就是文档
文档中的键值对是有序的
{"greeting":"Hello"; "foo":3}
{"foo":3; "greeting":"hello"}

2.键不能含有'\0' 这个字符用来表示键的结尾
. 和 $ 有特别意义
以"_"开头的键是保留的，但是并不严格要求
{"foo":3}
{"Foo":3}	这两行不同

{"foo":"3"}
{"foo": 3}	这两行不同

不能有重复的键

集合 collection
集合就是一个文档 类比于表
集合是无模式的
{"greet":"hello"}
{"foo":5}
可以放到一个集合中

基本数据类型
就是json的类型
String
Number
Date
Buffer
Boolean
Mixed
ObjectId
Array

sub docs
var childSchema = new Schema({ name: 'string' });
var parentSchema = new Schema({
	children: [childSchema]
});

var Parent = mongoose.model('Parent', parentSchema);
var parent = new Parent({ children: [{name: 'Matt'},{name:'Sarah'}]);
parent.children[0].name = 'Matthew';
parent.save(callback);

childSchema.pre('save', function(next){
	if('invalid' == this.name) return next(new Error('#sadpanda'));
	next();
});

var parent = new Parent({ children: [name:'invalid']});
parent.save(function(err){
	console.log(err.message);
});

find a sub-document
var doc = parent.children.id(id);

adding sub-docs
parent.children.push({name: 'Liesl'});
var subdoc = parent.children[0];
subdoc.isNew; //true

remove docs
var doc = parent.children.id(id).remove();
parent.save(function(err){
	if(err) return handleError(err);
	console.log();
});

============================================================

var mongoose = require('mongoose');
var db = mongoose.createConnection('localhost', 'test');
db.on('error', console.error.bind(console, 'connection failed'));
db.once('open', function(){
	console.log('open database success');
});

//定义schema
var PersonSchema = new mongoose.Schema({
	name: String
	Number
	Date
	Buffer
	Boolean
	Mixed
	ObjectId
	Array
});

//定义model
var PersonModel = db.model('Person', PersonSchema);
//var personModel = db.model('Person');

//定义entity
var psersonEntity = new PersonModel({name:'Krouky'});
console.log(personEntity.name);

//定义method
PersonSchema.method.speak = function() {
	console.log('my name is '+this.name);
}
var PersonModel = db.model('Person', PersonSchema);
var personEntity = new PersonModel({name: 'Krouky'});
personEntity.speak();

//Entity有crud方法
personEntity.save();

//执行查询使用model，entity也可以做到
PersonModel.find(function(err, persons){
	
});
